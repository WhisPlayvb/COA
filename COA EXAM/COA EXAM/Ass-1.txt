%macro WRITE 02
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro READ 02
mov rax,0
mov rdi,0
mov rsi,%1
mov rdx,%2
syscall
%endmacro

section .data
	msg1 db "Enter 2 numbers : ",10
	len1 equ $-msg1
	msg2 db "Addition is : ",10
	len2 equ $-msg2
	msg3 db "Subtraction is : ",10
	len3 equ $-msg3
	msg4 db "Multiplication is : ",10
	len4 equ $-msg4
	msg5 db "Quotient is : ",10
	len5 equ $-msg5
	msg6 db 10,"Remainder is : ",10
	len6 equ $-msg6
	msg7 db "Wrong Choice!!",10
	len7 equ $-msg7
	menu db 10,"* Menu *",10
		db " 1. Addition",10
		db " 2. Subtraction",10
		db " 3. Multiplication",10
		db " 4. Division",10
		db " 5. Exit",10
		db " Enter your choice : ",10
	menu_len equ $-menu

section .bss
	choice resb 02
	a resq 1
	b resq 1
	c resq 1
	d resq 1
	char_buff resb 17

section .text
	global _start
	_start:
	
	printmenu: WRITE menu,menu_len
		READ choice,02
		cmp byte[choice],31H
		je addition
		cmp byte[choice],32H
		je subtraction
		cmp byte[choice],33H
		je multiplication
		cmp byte[choice],34H
		je division
		cmp byte[choice],35H
		je exit
		
		WRITE msg7,len7
		jmp printmenu
	
	addition: WRITE msg1,len1
		READ char_buff,17
		call accept
		mov qword[a],rbx

		READ char_buff,17
		call accept
		mov qword[b],rbx
		mov rax,qword[a]
		add rax,qword[b]
		mov qword[c],rax

		WRITE msg2,len2
		mov rbx,[c]
		call display
		jmp printmenu

	subtraction: WRITE msg1,len1
		READ char_buff,17
		call accept
		mov qword[a],rbx
		READ char_buff,17
		call accept
		mov qword[b],rbx

		mov rax,qword[a]
		sub rax,qword[b]
		mov qword[c],rax

		WRITE msg3,len3
		mov rbx,[c]
		call display
		jmp printmenu

	multiplication: WRITE msg1,len1
		READ char_buff,17
		call accept
		mov qword[a],rbx

		READ char_buff,17
		call accept
		mov qword[b],rbx

		mov rax,qword[a]
		mul qword[b]
		mov qword[c],rdx
		mov qword[d],rax

		WRITE msg4,len4
		mov rbx,qword[c]
		call display
		mov rbx,qword[d]
		call display
		jmp printmenu

	division: WRITE msg1,len1
		READ char_buff,17
		call accept
		mov qword[a],rbx

		READ char_buff,17
		call accept
		mov qword[b],rbx

		mov rdx,00H
		mov rax,qword[a]
		div qword[b]
		mov qword[c],rax
		mov qword[d],rdx

		WRITE msg5,len5
		mov rbx,qword[c]
		call display
		WRITE msg6,len6
		mov rbx,qword[d]
		call display

	exit: mov rax,60
		mov rdi,00
		syscall

	accept : dec rax

		mov rcx,rax
		mov rbx,00H
		mov rsi,char_buff

	up1: shl rbx,04H
		mov rdx,00H
		mov dl,byte[rsi]
		cmp dl,39H
		jbe sub30
		sub dl,07H
	sub30: sub dl,30H
		add rbx,rdx
		inc rsi
		dec rcx
		jnz up1
		ret
	display:mov rsi,char_buff
		mov rcx,16
		
		up:rol rbx,04
		mov dl,bl
		and dl,0FH
		cmp dl,09H
		jbe add30
		add dl,07H

	add30:add dl,30H
		mov byte[rsi],dl
		inc rsi
		dec rcx
		jnz up
	WRITE char_buff,16
	ret

%ifdef
* Menu *
1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Exit
Enter your choice :
1
Enter 2 numbers :
4
5
Addition is :
0000000000000007
* Menu *
1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Exit
Enter your choice :
2
Enter 2 numbers :
54
Subtraction is :
0000000000000001
* Menu *
1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Exit
Enter your choice :
3
Enter 2 numbers :
32
Multiplication is :
00000000000000000000000000000006
* Menu *
1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Exit
Enter your choice :
4
Enter 2 numbers :
42
Quotient is :
0000000000000002
Remainder is :
0000000000000000
%endif