%macro WRITE 02
	mov rax,1
	mov rdi,1
	mov rsi,%1
	mov rdx,%2
	syscall
%endmacro

%macro READ 02
	mov rax,0
	mov rdi,0
	mov rsi,%1
	mov rdx,%2
	syscall
%endmacro

section .data
	menu db 10,"***Menu***",10
		db " 1. Successive Addition ",10
		db " 2. Shift and Add ",10
		db " 3. Exit ",10
		db " Enter your choice : ",10
	len equ $-menu
	msg1 db " Enter 2 numbers : ",10
	len1 equ $-msg1
	msg2 db " The answer is : ",10
	len2 equ $-msg2
	msg3 db " Wrong Choice ",10
	len3 equ $-msg3

section .bss
	m resq 1
	n resq 1
	char_buff resb 17
	B resq 1
	Q resq 1
	A resq 1
	ans resq 1
	choice resb 02

section .text
	global _start
	_start: WRITE msg1,len1
		READ char_buff,17
		call accept

		mov [m],rbx
		READ char_buff,17
		call accept

		mov [n],rbx

	printmenu:WRITE menu,len
		READ choice,02
		cmp byte[choice],31H
		je succadd
		cmp byte[choice],32H
		je shiftnadd
		cmp byte[choice],33H
		je exit
		WRITE msg3,len3
		jmp printmenu

	succadd: mov rbx,00H
		mov rcx,[n]

	up1: add rbx,[m]
		dec rcx
		jnz up1
		mov [ans],rbx
		WRITE msg2,len2
		mov rbx,[ans]
		call display
		jmp printmenu

	shiftnadd:mov rbx,[m]
		mov [B],rbx
		mov rbx,[n]
		mov [Q],rbx
		mov qword[A],00
		mov rcx,64
		
	up2:mov rbx,[Q]
		and rbx,01H
		jz shiftaq
		mov rbx,[B]
		add [A],rbx

	shiftaq: shr qword[Q],01
		mov rbx,[A]
		and rbx,01
		jz shifta

		mov rbx,01H
		ror rbx,01H
		or qword[Q],rbx

	shifta: shr qword[A],01H
		dec rcx
		jnz up2
		WRITE msg2,len2
		mov rbx,[A]
		call display
		mov rbx,[Q]
		call display
		jmp printmenu

	exit: mov rax,60
		mov rdi,00
		syscall

	accept : dec rax
		mov rcx,rax
		mov rbx,00H
		mov rsi,char_buff

	up3: shl rbx,04H
		mov rdx,00H
		mov dl,byte[rsi]
		cmp dl,39H
		jbe sub30
		sub dl,07H
		sub30: sub dl,30H
		add rbx,rdx
		inc rsi
		dec rcx
		jnz up3
		ret

	display:mov rsi,char_buff
		mov rcx,16

	up:rol rbx,04
		mov dl,bl
		and dl,0FH
		cmp dl,09H
		jbe add30
		add dl,07H
		
		add30:add dl,30H
		mov byte[rsi],dl
		inc rsi
		dec rcx
		jnz up
		WRITE char_buff,16
		ret